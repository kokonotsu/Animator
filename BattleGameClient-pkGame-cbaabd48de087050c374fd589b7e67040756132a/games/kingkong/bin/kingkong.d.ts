declare class StateBG extends State {
    background: egret.Bitmap;
    stageWidth: number;
    stageHeight: number;
    halfStageWidth: number;
    halfStageHeight: number;
    constructor();
    init(): void;
    bg: string;
}
declare class GameKingkong extends StateBG {
    private _sceneLeft;
    private _sceneRight;
    private _uiContainer;
    private _progress1;
    private _progress2;
    private _win;
    private returnToLastButton;
    private _conBitmap;
    constructor();
    init(): void;
    private onMasterEvent(e);
    private onGameEvent(data);
    private isStop;
    private stop();
    private onGameOver(e);
    private onGameResult(data);
    private onGameStart(e);
    private onLeftWin(e);
    private onRightWin(e);
    private onLeftShoot(e);
    private onRightShoot(e);
    private onTouchBegin(e);
    tick(advancedTime: number): void;
    dispose(): void;
}
declare class KingkongScene extends egret.DisplayObjectContainer {
    static EVENT_SHOOT: string;
    static EVENT_SHOOT_GROUND: string;
    static EVENT_JUMP: string;
    static EVENT_BOOM: string;
    static EVENT_GET_BOOM: string;
    static EVENT_GET_BANANA: string;
    static MODE_MANUAL: number;
    static MODE_NET: number;
    static MODE_AI: number;
    static FAST_TIME: number;
    static INVINCIBLE_TIME: number;
    static touched: boolean;
    stageWidth: number;
    stageHeight: number;
    private _building;
    private _kingkong;
    private _curDistance;
    private _totalDistance;
    private _loopLockPoint;
    private _itemContainer;
    private _uiContainer;
    private _curItemConfigs;
    private _curItems;
    private _kingkongPosMinY;
    private _kingkongPosMaxY;
    private _fastLastTime;
    private _fast;
    private _slow;
    self: boolean;
    private btnJump;
    private btnShoot;
    private _tip;
    private _kingkongPosY;
    private _kingkongOffsetY;
    private _avatar;
    private _chain;
    private _gameStart;
    master: boolean;
    key: KingkongItem;
    private _curLevel;
    private _curTime;
    private _mode;
    private _ai;
    private _lastAddedBoom;
    private _invincibleTime;
    progress: number;
    constructor(width: number, height: number, master?: boolean, uiLayer?: egret.DisplayObjectContainer);
    mode: number;
    readonly gameStart: boolean;
    private tipFlag;
    private addTip();
    private removeTip();
    private onAdded(e);
    dispose(): void;
    init(): void;
    initAI(level: number): void;
    private onAIShoot(e);
    private onAIJump(e);
    advanceTime(advancedTime: number): boolean;
    private checkWin();
    fail(): void;
    private win();
    private gameOver();
    private checkFast(advancedTime);
    private testHit();
    private stopFast();
    kingkongGetBanana(): void;
    kingkongGetBoom(): void;
    private kingkongRecover();
    private onKingkongRecover(e);
    kingkongHit(): void;
    private disToConfig(d);
    private configToD(d);
    fireBoom: (arrive: Function) => void;
    addBoom: () => void;
    private addBoomComplete(boom);
    private addItems();
    private moveItems();
    private removeItem(item, index);
    private removeItems();
    private removeAllItems();
    touchLeft(): void;
    touchRight(): void;
    kingkongJump(): void;
    kingkongShoot(): void;
    preStart(): void;
    startRun(): void;
}
declare class AIKingkong extends egret.EventDispatcher {
    static AI_LEVEL_0: number;
    static AI_LEVEL_1: number;
    static AI_LEVEL_2: number;
    static AI_LEVEL_3: number;
    static MAX_JUMP_DIS: number;
    static MIN_JUMP_DIS: number;
    static RANDOM_JUMP_TIME: number;
    private _kingkong;
    private _curItems;
    level: number;
    private _running;
    private _nextRandomJumpTime;
    private _nextJumpTime;
    private _nextShootTime;
    private _preItem;
    constructor();
    kingkong: Kingkong;
    curItems: KingkongItem[];
    start(): void;
    over(): void;
    advanceTime(advancedTime: number): void;
    resetNextShootTime(): void;
    kingkongCanShoot(): boolean;
    kingkongCanJump(advancedTime: number): boolean;
    randomJump(): boolean;
}
declare class Building extends egret.Sprite {
    static NORMAL_SPEED: number;
    static FAST_SPEED: number;
    private dbBuilding;
    curDistance: number;
    tickDistance: number;
    private _lastD;
    private _curD;
    private _offset;
    private _bone;
    constructor();
    reset(): void;
    advanceTime(advancedTime: number): void;
    runNormal(): void;
    runFast(): void;
    runSlow(): void;
    run(): void;
    stop(): void;
}
declare class Kingkong extends egret.Sprite {
    static EVENT_RECOVER: string;
    static EVENT_SHOOT: string;
    static EVENT_JUMP: string;
    static EVENT_WIN: string;
    static EVENT_GAME_START: string;
    static EVENT_GAME_OVER: string;
    static STATUS_RUN: number;
    static STATUS_JUMP: number;
    static STATUS_HIT: number;
    static STATUS_STAND: number;
    static STATUS_OVER: number;
    static ARM_LENGTH: number;
    static LEG_LENGTH: number;
    static LENGTH: number;
    static NORMAL_SPEED: number;
    static FAST_SPEED: number;
    static SLOW_SPEED: number;
    dbKingkong: DBArmature;
    boomArmature: dragonBones.Armature;
    hasBoom: boolean;
    private _status;
    private _jumpState;
    invincible: boolean;
    private _fast;
    private _slow;
    private _boomBone;
    private _dust;
    private _bananaPeel;
    private _speedTw;
    constructor(master?: boolean);
    onAir(): boolean;
    run(): void;
    playHit(): void;
    private onBoomComplete(e);
    jumpEnable(): boolean;
    jump(): void;
    runFast(): void;
    runSlow(): void;
    runNormal(): void;
    private onJumpComplete(e);
    stand(): void;
    getBoom(v: boolean): void;
    reset(): void;
}
declare class KingkongItem extends egret.Sprite {
    static TYPE_BANANA: number;
    static TYPE_BOOM: number;
    static TYPE_FIRE_BOOM: number;
    static TYPE_KEY: number;
    static TYPE_WIN: number;
    static SIZE: number;
    static HALF_SIZE: number;
    private _type;
    pos: number;
    private _item;
    constructor();
    private reDraw();
    type: number;
}
declare class ScoreData {
    private _curBestHit;
    private _curGoodHit;
    private _curMissHit;
    private _curComboo;
    maxBestHit: number;
    maxGoodHit: number;
    maxMissHit: number;
    maxComboo: number;
    curBestHit: number;
    curGoodHit: number;
    curMissHit: number;
    curComboo: number;
}
